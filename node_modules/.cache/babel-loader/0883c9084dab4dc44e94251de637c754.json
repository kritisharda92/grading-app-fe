{"ast":null,"code":"var _jsxFileName = \"/Users/kritisharda/Documents/grading-app-fe/src/components/ProfessorWorkflow/ProfessorConfirmationComponent.jsx\";\nimport React from 'react';\nimport QuestionDescription from './QuestionDescriptionComponent';\nimport Header from '../HeaderComponent/HeaderComponent';\nimport SubHeader from '../SubHeaderComponent/SubHeaderComponent';\nimport './ProfessorConfirmationComponent.scss';\n\nconst binderIcon = require('../../assets/Clean-Binder.png');\n\nclass UploadHomeworkComponent extends React.Component {\n  constructor() {\n    super();\n    this.addNewProblem = this.addNewProblem.bind(this);\n    this.logoutProfessor = this.logoutProfessor.bind(this);\n  }\n\n  addNewProblem() {\n    this.props.history.push('/professor');\n  }\n\n  logoutProfessor() {\n    this.props.history.push('/');\n  }\n\n  handleHomeworkUploadSubmit(event) {\n    var hw_dd = new FormData();\n    hw_dd.append(\"homeworkName\", this.state.homeworkName);\n    hw_dd.append(\"dueDate\", this.state.dueDate); // API call to create homework - assumptions - hw name is unique\n    // fetch('http://localhost:8080/create', {\n    //   method: 'POST',\n    //   body: fd,\n    //   mode: \"no-cors\"\n    // });\n\n    const n = this.state.numberOfProblems;\n\n    for (let i = 0; i < n; i++) {\n      let prob = new FormData();\n      prob.append(\"homeworkName\", this.state.homeworkName);\n      prob.append(\"problemName\", document.getElementById(i).getElementsByTagName(\"input\")[0].value);\n      prob.append(\"problemDescription\", document.getElementById(i).getElementsByTagName(\"input\")[1].value);\n      prob.append(\"inputFile\", document.getElementById(i).getElementsByTagName(\"input\")[2].files[0]);\n      prob.append(\"outputFile\", document.getElementById(i).getElementsByTagName(\"input\")[3].files[0]); // API call to add problems to homework\n      // fetch('http://localhost:8080/create', {\n      //   method: 'POST',\n      //   body: prob,\n      //   mode: \"no-cors\"\n      // });\n    }\n\n    this.props.history.push('/professorConfirmation');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"professor-conf-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(SubHeader, {\n      user: \"Professor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"professor-conf-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Confirmation\"), React.createElement(\"img\", {\n      src: binderIcon,\n      alt: \"confirmation\",\n      className: \"confimation-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \" YAY! The problem was uploaded successfully\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"button\",\n      name: \"addProblem\",\n      value: \"New Problem\",\n      onClick: this.addNewProblem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      name: \"profLogout\",\n      value: \"Logout\",\n      onClick: this.logoutProfessor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default UploadHomeworkComponent;","map":{"version":3,"sources":["/Users/kritisharda/Documents/grading-app-fe/src/components/ProfessorWorkflow/ProfessorConfirmationComponent.jsx"],"names":["React","QuestionDescription","Header","SubHeader","binderIcon","require","UploadHomeworkComponent","Component","constructor","addNewProblem","bind","logoutProfessor","props","history","push","handleHomeworkUploadSubmit","event","hw_dd","FormData","append","state","homeworkName","dueDate","n","numberOfProblems","i","prob","document","getElementById","getElementsByTagName","value","files","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport QuestionDescription from './QuestionDescriptionComponent';\nimport Header from '../HeaderComponent/HeaderComponent';\nimport SubHeader from '../SubHeaderComponent/SubHeaderComponent';\nimport './ProfessorConfirmationComponent.scss';\n\nconst binderIcon = require('../../assets/Clean-Binder.png');\n\nclass UploadHomeworkComponent extends React.Component {\n    constructor() {\n      super();\n\n      this.addNewProblem = this.addNewProblem.bind(this);\n      this.logoutProfessor = this.logoutProfessor.bind(this);\n    }\n\n    addNewProblem() {\n        this.props.history.push('/professor');\n    }\n\n    logoutProfessor() {\n        this.props.history.push('/');\n    }\n\n\n    handleHomeworkUploadSubmit(event) {\n\n      var hw_dd = new FormData();\n      hw_dd.append(\"homeworkName\", this.state.homeworkName);\n      hw_dd.append(\"dueDate\", this.state.dueDate);\n\n      // API call to create homework - assumptions - hw name is unique\n      // fetch('http://localhost:8080/create', {\n      //   method: 'POST',\n      //   body: fd,\n      //   mode: \"no-cors\"\n      // });\n\n      const n = this.state.numberOfProblems;\n\n      for(let i=0; i<n; i++) {\n        let prob = new FormData();\n        prob.append(\"homeworkName\", this.state.homeworkName);\n        prob.append(\"problemName\",document.getElementById(i).getElementsByTagName(\"input\")[0].value);\n        prob.append(\"problemDescription\",document.getElementById(i).getElementsByTagName(\"input\")[1].value);\n        prob.append(\"inputFile\",document.getElementById(i).getElementsByTagName(\"input\")[2].files[0]);\n        prob.append(\"outputFile\",document.getElementById(i).getElementsByTagName(\"input\")[3].files[0]);\n\n        // API call to add problems to homework\n        // fetch('http://localhost:8080/create', {\n        //   method: 'POST',\n        //   body: prob,\n        //   mode: \"no-cors\"\n        // });\n      }\n\n      this.props.history.push('/professorConfirmation');\n    }\n\n  \n    render() {\n      return (\n        <div className='professor-conf-container'>\n            <Header />\n            <SubHeader user=\"Professor\"/>\n            <h2 className=\"professor-conf-heading\">Confirmation</h2>\n            <img src={binderIcon} alt=\"confirmation\" className=\"confimation-image\"/> \n            <div> YAY! The problem was uploaded successfully</div>\n            <div>\n                <input type=\"button\" name=\"addProblem\" value=\"New Problem\" onClick={this.addNewProblem}/>\n                <input type=\"button\" name=\"profLogout\" value=\"Logout\" onClick={this.logoutProfessor}/>\n            </div>\n            {/* <div className=\"professor-form\">\n              Homework Name: <input className=\"homework-name\" type=\"text\" name=\"homeworkName\" onChange={this.handleHomeworkName}/>\n              Due Date: <input type=\"date\" name=\"dueDate\" onChange={this.handleDueDate}/>\n              <QuestionDescription id={0} questionData={this.problemUpdate}/>\n              {\n                this.state.problems.map((problem,index) => {\n                  return (\n                    <QuestionDescription key={index} id={index+1} questionData={this.problemUpdate}/>\n                  )\n              })\n              }\n              <input type=\"button\" onClick={this.addAnotherProblem} value=\"Add another problem\"/>\n              {\n                (this.state.problems.length>0) ? \n                  <input type=\"button\" onClick={this.removeProblem} value=\"Remove\"/>\n                  :\n                  \"\"\n              }\n\n              <br />\n              <button type=\"submit\" onClick={this.handleHomeworkUploadSubmit}>Submit</button>\n            </div> */}\n        </div>\n      );\n    }\n  }\n\n  export default UploadHomeworkComponent;"]},"metadata":{},"sourceType":"module"}