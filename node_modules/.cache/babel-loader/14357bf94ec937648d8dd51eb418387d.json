{"ast":null,"code":"var _jsxFileName = \"/Users/kritisharda/Documents/GitHub/grading-app-fe/src/components/ProfessorWorkflow/UploadHomeworkComponent.jsx\";\nimport React from 'react';\nimport QuestionDescription from './QuestionDescriptionComponent';\nimport Header from '../HeaderComponent/HeaderComponent';\nimport SubHeader from '../SubHeaderComponent/SubHeaderComponent';\nimport { Form, Button } from 'react-bootstrap';\nimport './UploadHomeworkComponent.scss';\n\nclass UploadHomeworkComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      problems: [],\n      homeworkName: '',\n      dueDate: '',\n      numberOfProblems: 1\n    };\n    this.dataMain = {};\n    this.addAnotherProblem = this.addAnotherProblem.bind(this);\n    this.removeProblem = this.removeProblem.bind(this);\n    this.handleHomeworkUploadSubmit = this.handleHomeworkUploadSubmit.bind(this);\n    this.handleHomeworkName = this.handleHomeworkName.bind(this);\n    this.handleDueDate = this.handleDueDate.bind(this);\n    this.problemUpdate = this.problemUpdate.bind(this);\n  }\n\n  addAnotherProblem() {\n    this.setState({\n      problems: [...this.state.problems, {}],\n      numberOfProblems: this.state.numberOfProblems + 1\n    });\n  }\n\n  removeProblem() {\n    var len = this.state.problems.length;\n    this.setState({\n      problems: this.state.problems.splice(0, len - 1),\n      numberOfProblems: this.state.numberOfProblems - 1\n    });\n  }\n\n  handleHomeworkUploadSubmit(event) {\n    var hw_dd = new FormData();\n    hw_dd.append(\"homeworkName\", this.state.homeworkName);\n    hw_dd.append(\"dueDate\", this.state.dueDate); // API call to create homework - assumptions - hw name is unique\n\n    fetch('http://localhost:8080/create', {\n      method: 'POST',\n      body: hw_dd,\n      mode: \"no-cors\"\n    });\n    const n = this.state.numberOfProblems;\n\n    for (let i = 0; i < n; i++) {\n      let prob = new FormData();\n      prob.append(\"homeworkName\", this.state.homeworkName);\n      prob.append(\"problemName\", document.getElementById(i).getElementsByTagName(\"input\")[0].value);\n      prob.append(\"problemDescription\", document.getElementById(i).getElementsByTagName(\"input\")[1].value);\n      prob.append(\"inputFile\", document.getElementById(i).getElementsByTagName(\"input\")[2].files[0]);\n      prob.append(\"outputFile\", document.getElementById(i).getElementsByTagName(\"input\")[3].files[0]); // API call to add problems to homework\n\n      fetch('http://localhost:8080/upload', {\n        method: 'POST',\n        body: prob,\n        mode: \"no-cors\"\n      });\n    }\n\n    this.props.history.push('/professorConfirmation');\n  }\n\n  handleHomeworkName(e) {\n    this.setState({\n      homeworkName: e.target.value\n    });\n  }\n\n  handleDueDate(e) {\n    this.setState({\n      dueDate: e.target.value\n    });\n  }\n\n  problemUpdate(dataFromChild) {\n    this.dataMain = dataFromChild;\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"professor-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(SubHeader, {\n      user: \"Professor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      className: \"professor-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Create Homework\"), React.createElement(\"div\", {\n      className: \"professor-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"formHomeworkName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Homework Name\"), React.createElement(Form.Control, {\n      className: \"homework-name\",\n      type: \"text\",\n      name: \"homeworkName\",\n      onChange: this.handleHomeworkName,\n      placeholder: \"Enter homework name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"formDueDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Due Date\"), React.createElement(Form.Control, {\n      className: \"dueDate\",\n      type: \"date\",\n      name: \"dueDate\",\n      onChange: this.handleDueDate,\n      placeholder: \"Enter due date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(QuestionDescription, {\n      id: 0,\n      questionData: this.problemUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), this.state.problems.map((problem, index) => {\n      return React.createElement(QuestionDescription, {\n        key: index,\n        id: index + 1,\n        questionData: this.problemUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      onClick: this.addAnotherProblem,\n      value: \"Add another problem\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), this.state.problems.length > 0 ? React.createElement(\"input\", {\n      type: \"button\",\n      onClick: this.removeProblem,\n      value: \"Remove\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }) : \"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.handleHomeworkUploadSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default UploadHomeworkComponent;","map":{"version":3,"sources":["/Users/kritisharda/Documents/GitHub/grading-app-fe/src/components/ProfessorWorkflow/UploadHomeworkComponent.jsx"],"names":["React","QuestionDescription","Header","SubHeader","Form","Button","UploadHomeworkComponent","Component","constructor","state","problems","homeworkName","dueDate","numberOfProblems","dataMain","addAnotherProblem","bind","removeProblem","handleHomeworkUploadSubmit","handleHomeworkName","handleDueDate","problemUpdate","setState","len","length","splice","event","hw_dd","FormData","append","fetch","method","body","mode","n","i","prob","document","getElementById","getElementsByTagName","value","files","props","history","push","e","target","dataFromChild","render","console","log","map","problem","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport QuestionDescription from './QuestionDescriptionComponent';\nimport Header from '../HeaderComponent/HeaderComponent';\nimport SubHeader from '../SubHeaderComponent/SubHeaderComponent';\nimport { Form, Button } from 'react-bootstrap';\n\nimport './UploadHomeworkComponent.scss';\n\nclass UploadHomeworkComponent extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        problems: [],\n        homeworkName: '',\n        dueDate: '',\n        numberOfProblems: 1\n      }\n      this.dataMain = {};\n      this.addAnotherProblem = this.addAnotherProblem.bind(this);\n      this.removeProblem = this.removeProblem.bind(this);\n      this.handleHomeworkUploadSubmit = this.handleHomeworkUploadSubmit.bind(this);\n      this.handleHomeworkName = this.handleHomeworkName.bind(this);\n      this.handleDueDate = this.handleDueDate.bind(this);\n      this.problemUpdate = this.problemUpdate.bind(this);\n    }\n\n    addAnotherProblem() {\n      this.setState({ \n        problems: [...this.state.problems,{}],\n        numberOfProblems: this.state.numberOfProblems+1\n      })\n    }\n\n    removeProblem() {\n      var len = this.state.problems.length;\n      this.setState({ \n        problems: this.state.problems.splice(0,len-1),\n        numberOfProblems: this.state.numberOfProblems-1\n      })\n    }\n\n\n    handleHomeworkUploadSubmit(event) {\n\n      var hw_dd = new FormData();\n      hw_dd.append(\"homeworkName\", this.state.homeworkName);\n      hw_dd.append(\"dueDate\", this.state.dueDate);\n\n      // API call to create homework - assumptions - hw name is unique\n      fetch('http://localhost:8080/create', {\n        method: 'POST',\n        body: hw_dd,\n        mode: \"no-cors\"\n      });\n\n      const n = this.state.numberOfProblems;\n\n      for(let i=0; i<n; i++) {\n        let prob = new FormData();\n        prob.append(\"homeworkName\", this.state.homeworkName);\n        prob.append(\"problemName\",document.getElementById(i).getElementsByTagName(\"input\")[0].value);\n        prob.append(\"problemDescription\",document.getElementById(i).getElementsByTagName(\"input\")[1].value);\n        prob.append(\"inputFile\",document.getElementById(i).getElementsByTagName(\"input\")[2].files[0]);\n        prob.append(\"outputFile\",document.getElementById(i).getElementsByTagName(\"input\")[3].files[0]);\n\n        // API call to add problems to homework\n        fetch('http://localhost:8080/upload', {\n          method: 'POST',\n          body: prob,\n          mode: \"no-cors\"\n        });\n      }\n\n      this.props.history.push('/professorConfirmation');\n\n    }\n\n    handleHomeworkName(e) {\n      this.setState({homeworkName: e.target.value});\n    }\n\n    handleDueDate(e) {\n      this.setState({dueDate: e.target.value});\n    }\n\n    problemUpdate(dataFromChild) {\n      this.dataMain = dataFromChild;\n    }\n  \n    render() {\n      console.log(this.state);\n      return (\n        <div className='professor-container'>\n            <Header />\n            <SubHeader user=\"Professor\"/>\n            <h2 className=\"professor-heading\">Create Homework</h2>\n            <div className=\"professor-form\">\n              <Form.Group controlId=\"formHomeworkName\">\n                <Form.Label>Homework Name</Form.Label>\n                <Form.Control className=\"homework-name\" type=\"text\" name=\"homeworkName\" onChange={this.handleHomeworkName} placeholder=\"Enter homework name\" />\n              </Form.Group>\n              <Form.Group controlId=\"formDueDate\">\n                <Form.Label>Due Date</Form.Label>\n                <Form.Control className=\"dueDate\" type=\"date\" name=\"dueDate\" onChange={this.handleDueDate} placeholder=\"Enter due date\" />\n              </Form.Group>\n              {/* Homework Name: <input className=\"homework-name\" type=\"text\" name=\"homeworkName\" onChange={this.handleHomeworkName}/> */}\n              {/* Due Date: <input type=\"date\" name=\"dueDate\" onChange={this.handleDueDate}/> */}\n              <QuestionDescription id={0} questionData={this.problemUpdate}/>\n              {\n                this.state.problems.map((problem,index) => {\n                  return (\n                    <QuestionDescription key={index} id={index+1} questionData={this.problemUpdate}/>\n                  )\n              })\n              }\n              <input type=\"button\" onClick={this.addAnotherProblem} value=\"Add another problem\"/>\n              {\n                (this.state.problems.length>0) ? \n                  <input type=\"button\" onClick={this.removeProblem} value=\"Remove\"/>\n                  :\n                  \"\"\n              }\n\n              <br />\n              <button type=\"submit\" onClick={this.handleHomeworkUploadSubmit}>Submit</button>\n            </div>\n        </div>\n      );\n    }\n  }\n\n  export default UploadHomeworkComponent;"]},"metadata":{},"sourceType":"module"}