{"ast":null,"code":"import _slicedToArray from \"/Users/kritisharda/Documents/demo-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kritisharda/Documents/demo-app/src/MyForm.js\";\nimport React from 'react';\nconst inputParsers = {\n  date(input) {\n    const _input$split = input.split('/'),\n          _input$split2 = _slicedToArray(_input$split, 3),\n          month = _input$split2[0],\n          day = _input$split2[1],\n          year = _input$split2[2];\n\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n  },\n\n  uppercase(input) {\n    return input.toUpperCase();\n  },\n\n  number(input) {\n    return parseFloat(input);\n  }\n\n};\n\nclass MyForm extends React.Component {\n  constructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    //   event.preventDefault();\n    //   const data = new FormData(event.target);\n    event.preventDefault();\n    const form = event.target;\n    const data = new FormData(form);\n\n    for (let name of data.keys()) {\n      const input = form.elements[name];\n      const parserName = input.dataset.parse;\n\n      if (parserName) {\n        const parser = inputParsers[parserName];\n        const parsedValue = parser(data.get(name));\n        data.set(name, parsedValue);\n      }\n    }\n\n    console.log(data); //   fetch('/api/form-submit-url', {\n    //     method: 'POST',\n    //     body: data,\n    //   });\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Enter Homework name\"), React.createElement(\"input\", {\n      id: \"name\",\n      name: \"name\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Enter due date\"), React.createElement(\"input\", {\n      id: \"date\",\n      name: \"date\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Send data!\"));\n  }\n\n}\n\nexport default MyForm;","map":{"version":3,"sources":["/Users/kritisharda/Documents/demo-app/src/MyForm.js"],"names":["React","inputParsers","date","input","split","month","day","year","uppercase","toUpperCase","number","parseFloat","MyForm","Component","constructor","handleSubmit","bind","event","preventDefault","form","target","data","FormData","name","keys","elements","parserName","dataset","parse","parser","parsedValue","get","set","console","log","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,CAACC,KAAD,EAAQ;AAAA,yBACiBA,KAAK,CAACC,KAAN,CAAY,GAAZ,CADjB;AAAA;AAAA,UACHC,KADG;AAAA,UACIC,GADJ;AAAA,UACSC,IADT;;AAEV,qBAAUA,IAAV,cAAkBF,KAAlB,cAA2BC,GAA3B;AACD,GAJgB;;AAKjBE,EAAAA,SAAS,CAACL,KAAD,EAAQ;AACf,WAAOA,KAAK,CAACM,WAAN,EAAP;AACD,GAPgB;;AAQjBC,EAAAA,MAAM,CAACP,KAAD,EAAQ;AACZ,WAAOQ,UAAU,CAACR,KAAD,CAAjB;AACD;;AAVgB,CAArB;;AAaA,MAAMS,MAAN,SAAqBZ,KAAK,CAACa,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,CAACE,KAAD,EAAQ;AACpB;AACA;AAEAA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,IAAI,GAAGF,KAAK,CAACG,MAAnB;AACA,UAAMC,IAAI,GAAG,IAAIC,QAAJ,CAAaH,IAAb,CAAb;;AAEA,SAAK,IAAII,IAAT,IAAiBF,IAAI,CAACG,IAAL,EAAjB,EAA8B;AAC5B,YAAMrB,KAAK,GAAGgB,IAAI,CAACM,QAAL,CAAcF,IAAd,CAAd;AACA,YAAMG,UAAU,GAAGvB,KAAK,CAACwB,OAAN,CAAcC,KAAjC;;AAEA,UAAIF,UAAJ,EAAgB;AACd,cAAMG,MAAM,GAAG5B,YAAY,CAACyB,UAAD,CAA3B;AACA,cAAMI,WAAW,GAAGD,MAAM,CAACR,IAAI,CAACU,GAAL,CAASR,IAAT,CAAD,CAA1B;AACAF,QAAAA,IAAI,CAACW,GAAL,CAAST,IAAT,EAAeO,WAAf;AACD;AACF;;AAECG,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ,EAnBkB,CAoBpB;AACA;AACA;AACA;AACC;;AAEDc,EAAAA,MAAM,GAAG;AACP,WACE;AAAM,MAAA,QAAQ,EAAE,KAAKpB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEE;AAAO,MAAA,EAAE,EAAC,MAAV;AAAiB,MAAA,IAAI,EAAC,MAAtB;AAA6B,MAAA,IAAI,EAAC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAGS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHT,EAIE;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF,EAKE;AAAO,MAAA,EAAE,EAAC,MAAV;AAAiB,MAAA,IAAI,EAAC,MAAtB;AAA6B,MAAA,IAAI,EAAC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAMO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANP,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,CADF;AAWD;;AA5CgC;;AA+CnC,eAAeH,MAAf","sourcesContent":["import React from 'react';\n\nconst inputParsers = {\n    date(input) {\n      const [month, day, year] = input.split('/');\n      return `${year}-${month}-${day}`;\n    },\n    uppercase(input) {\n      return input.toUpperCase();\n    },\n    number(input) {\n      return parseFloat(input);\n    },\n  };\n\nclass MyForm extends React.Component {\n    constructor() {\n      super();\n      this.handleSubmit = this.handleSubmit.bind(this);\n    }\n  \n    handleSubmit(event) {\n    //   event.preventDefault();\n    //   const data = new FormData(event.target);\n\n    event.preventDefault();\n    const form = event.target;\n    const data = new FormData(form);\n\n    for (let name of data.keys()) {\n      const input = form.elements[name];\n      const parserName = input.dataset.parse;\n\n      if (parserName) {\n        const parser = inputParsers[parserName];\n        const parsedValue = parser(data.get(name));\n        data.set(name, parsedValue);\n      }\n    }\n      \n      console.log(data);\n    //   fetch('/api/form-submit-url', {\n    //     method: 'POST',\n    //     body: data,\n    //   });\n    }\n  \n    render() {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"name\">Enter Homework name</label>\n          <input id=\"name\" name=\"name\" type=\"text\" />\n            <br/><br/>\n          <label htmlFor=\"date\">Enter due date</label>\n          <input id=\"date\" name=\"date\" type=\"text\" />\n          <br/><br/>\n          <button>Send data!</button>\n        </form>\n      );\n    }\n  }\n\n  export default MyForm;"]},"metadata":{},"sourceType":"module"}