{"ast":null,"code":"var _jsxFileName = \"/Users/kritisharda/Documents/grading-app-fe/src/components/ProfessorWorkflow/UploadHomeworkComponent.jsx\";\nimport React from 'react';\nimport QuestionDescription from './QuestionDescriptionComponent';\nimport Header from '../HeaderComponent/HeaderComponent';\nimport './UploadHomeworkComponent.scss';\n\nclass UploadHomeworkComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      problems: [],\n      homeworkName: '',\n      dueDate: '',\n      numberOfProblems: 1\n    };\n    this.dataMain = {};\n    this.addAnotherProblem = this.addAnotherProblem.bind(this);\n    this.removeProblem = this.removeProblem.bind(this);\n    this.handleHomeworkUploadSubmit = this.handleHomeworkUploadSubmit.bind(this);\n    this.handleHomeworkName = this.handleHomeworkName.bind(this);\n    this.handleDueDate = this.handleDueDate.bind(this);\n    this.problemUpdate = this.problemUpdate.bind(this);\n    this.msg = this.msg.bind(this);\n  }\n\n  addAnotherProblem() {\n    this.setState({\n      problems: [...this.state.problems, \"\"],\n      numberOfProblems: this.state.numberOfProblems + 1\n    });\n  }\n\n  removeProblem() {\n    this.setState({\n      problem: this.state.problems.splice(0, 1),\n      numberOfProblems: this.state.numberOfProblems - 1\n    });\n  }\n\n  handleHomeworkUploadSubmit(event) {\n    const data = {\n      problems: this.state.problems,\n      homeworkName: this.state.homeworkName,\n      dueDate: this.state.dueDate\n    };\n    const n = this.state.numberOfProblems;\n\n    for (let i = 0; i <= n; i++) {\n      var problemName = document.getElementById(i).getElementsByTagName(\"input\")[0].value;\n      console.log(problemName); // let prob = {\n      //   problemName: document.getElementById({i}).getElementsByTagName(\"input\")[0].value,\n      //   problemDescription: document.getElementById(id).getElementsByTagName(\"input\")[1].value,\n      //   testCaseFile: document.getElementById(id).getElementsByTagName(\"input\")[2].value,\n      //   expectedOutputFile: document.getElementById(id).getElementsByTagName(\"input\")[3].value,\n      // }\n      // data['problems'].push(prob);\n    } // console.log(this.state);\n    // console.log(document.getElementById(0).getElementsByTagName(\"input\")[0].value)\n\n\n    console.log(data);\n  }\n\n  handleHomeworkName(e) {\n    this.setState({\n      homeworkName: e.target.value\n    });\n  }\n\n  handleDueDate(e) {\n    this.setState({\n      dueDate: e.target.value\n    });\n  } //   myCallback = (dataFromChild) => {\n  //     [...we will use the dataFromChild here...]\n  // },\n\n\n  problemUpdate(dataFromChild) {\n    this.dataMain = dataFromChild; // var idx = dataFromChild.id;\n    // var newProbs = this.state.problems;\n    // if(newProbs.length < idx)\n    //   newProbs.push(dataFromChild);\n    // else\n    //   newProbs[idx] = dataFromChild;\n    // this.setState({\n    //   problem: newProbs\n    // })\n  }\n\n  msg() {\n    console.log(\"this changed!\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"professor-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Welcome Professor!\"), \"Homework Name: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"homeworkName\",\n      onChange: this.handleHomeworkName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), \"Due Date: \", React.createElement(\"input\", {\n      type: \"date\",\n      name: \"dueDate\",\n      onChange: this.handleDueDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(QuestionDescription, {\n      id: 0,\n      questionData: this.problemUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), this.state.problems.map((problem, index) => {\n      return React.createElement(QuestionDescription, {\n        key: index,\n        id: index + 1,\n        questionData: this.problemUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    }), React.createElement(\"button\", {\n      onClick: this.addAnotherProblem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Add another problem\"), this.state.problems.length > 0 ? React.createElement(\"button\", {\n      onClick: this.removeProblem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Remove\") : \"\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleHomeworkUploadSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nexport default UploadHomeworkComponent;","map":{"version":3,"sources":["/Users/kritisharda/Documents/grading-app-fe/src/components/ProfessorWorkflow/UploadHomeworkComponent.jsx"],"names":["React","QuestionDescription","Header","UploadHomeworkComponent","Component","constructor","state","problems","homeworkName","dueDate","numberOfProblems","dataMain","addAnotherProblem","bind","removeProblem","handleHomeworkUploadSubmit","handleHomeworkName","handleDueDate","problemUpdate","msg","setState","problem","splice","event","data","n","i","problemName","document","getElementById","getElementsByTagName","value","console","log","e","target","dataFromChild","render","map","index","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport QuestionDescription from './QuestionDescriptionComponent';\nimport Header from '../HeaderComponent/HeaderComponent';\nimport './UploadHomeworkComponent.scss';\n\nclass UploadHomeworkComponent extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        problems: [],\n        homeworkName: '',\n        dueDate: '',\n        numberOfProblems: 1\n      }\n      this.dataMain = {};\n      this.addAnotherProblem = this.addAnotherProblem.bind(this);\n      this.removeProblem = this.removeProblem.bind(this);\n      this.handleHomeworkUploadSubmit = this.handleHomeworkUploadSubmit.bind(this);\n      this.handleHomeworkName = this.handleHomeworkName.bind(this);\n      this.handleDueDate = this.handleDueDate.bind(this);\n      this.problemUpdate = this.problemUpdate.bind(this);\n      this.msg = this.msg.bind(this);\n    }\n\n    addAnotherProblem() {\n      this.setState({ \n        problems: [...this.state.problems, \"\" ],\n        numberOfProblems: this.state.numberOfProblems+1\n      })\n    }\n\n    removeProblem() {\n      this.setState({ \n        problem: this.state.problems.splice(0,1),\n        numberOfProblems: this.state.numberOfProblems-1\n      })\n    }\n\n    handleHomeworkUploadSubmit(event) {\n      const data = {\n        problems: this.state.problems,\n        homeworkName: this.state.homeworkName,\n        dueDate: this.state.dueDate\n      }\n      const n = this.state.numberOfProblems;\n\n      for(let i = 0; i<= n; i++) {\n        var problemName = document.getElementById(i).getElementsByTagName(\"input\")[0].value;\n        console.log(problemName);\n        // let prob = {\n        //   problemName: document.getElementById({i}).getElementsByTagName(\"input\")[0].value,\n        //   problemDescription: document.getElementById(id).getElementsByTagName(\"input\")[1].value,\n        //   testCaseFile: document.getElementById(id).getElementsByTagName(\"input\")[2].value,\n        //   expectedOutputFile: document.getElementById(id).getElementsByTagName(\"input\")[3].value,\n        // }\n        // data['problems'].push(prob);\n      }\n      // console.log(this.state);\n      // console.log(document.getElementById(0).getElementsByTagName(\"input\")[0].value)\n      console.log(data);\n    }\n\n    handleHomeworkName(e) {\n      this.setState({homeworkName: e.target.value});\n    }\n\n    handleDueDate(e) {\n      this.setState({dueDate: e.target.value});\n    }\n\n  //   myCallback = (dataFromChild) => {\n  //     [...we will use the dataFromChild here...]\n  // },\n    problemUpdate(dataFromChild) {\n      this.dataMain = dataFromChild;\n\n      // var idx = dataFromChild.id;\n      // var newProbs = this.state.problems;\n      // if(newProbs.length < idx)\n      //   newProbs.push(dataFromChild);\n      // else\n      //   newProbs[idx] = dataFromChild;\n\n      // this.setState({\n      //   problem: newProbs\n      // })\n    }\n\n    msg() {\n      console.log(\"this changed!\")\n    }\n  \n    render() {\n      return (\n        <div className='professor-container'>\n            <Header />\n            <h1>Welcome Professor!</h1>\n            Homework Name: <input type=\"text\" name=\"homeworkName\" onChange={this.handleHomeworkName}/>\n            Due Date: <input type=\"date\" name=\"dueDate\" onChange={this.handleDueDate}/>\n            <QuestionDescription id={0} questionData={this.problemUpdate}/>\n            {\n              this.state.problems.map((problem,index) => {\n                return (\n                  <QuestionDescription key={index} id={index+1} questionData={this.problemUpdate}/>\n                )\n            })\n            }\n            <button onClick={this.addAnotherProblem}>Add another problem</button>\n            {\n              (this.state.problems.length>0) ? \n                <button onClick={this.removeProblem}>Remove</button>\n                :\n                \"\"\n            }\n\n            <br />\n            <button onClick={this.handleHomeworkUploadSubmit}>Submit</button>\n        </div>\n      );\n    }\n  }\n\n  export default UploadHomeworkComponent;"]},"metadata":{},"sourceType":"module"}